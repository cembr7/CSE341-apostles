const { getDb } = require('../database/dbConnect');
const { ObjectId } = require('mongodb');

const getAllApostles = async (req, res, next) => {
  try {
    const db = getDb();
    const collection = db.collection('apostles');
    const result = await collection.find().toArray();
    res.setHeader('Content-Type', 'application/json');
    res.status(200).json(result);
  } catch (error) {
    console.error('Error fetching apostles:', error.message, error.stack);
    res.status(500).json({ message: 'Error fetching apostles', error: error.message });
  }
};

const getSingleApostle = async (req, res, next) => {
  try {
    const userId = req.params.id;
    const db = getDb();
    const collection = db.collection('apostles');
    let result;
    try {
      result = await collection.findOne({ _id: new ObjectId(userId) });
    } catch (err) {
      console.log('getSingleApostle: Invalid ObjectId format for _id:', userId);
      return res.status(400).json({ message: 'Invalid apostle ID format' });
    }
    if (!result) {
      console.log('getSingleApostle: No document found for _id:', userId);
      return res.status(404).json({ message: 'Apostle not found' });
    }
    res.setHeader('Content-Type', 'application/json');
    res.status(200).json(result);
  } catch (error) {
    console.error('Error fetching apostle:', error.message, error.stack);
    res.status(500).json({ message: 'Error fetching apostle', error: error.message });
  }
};

const createApostle = async (req, res) => {
  try {
    const db = getDb();
    const apostle = req.body;

    if (!apostle || !apostle.firstName || !apostle.lastName || !apostle.age) {
      return res.status(400).json({ message: 'Invalid apostle data: firstName, lastName, and age are required' });
    }

    const apostleCollection = db.collection('apostles');
    const result = await apostleCollection.insertOne(apostle);
    const insertedApostle = await apostleCollection.findOne({ _id: result.insertedId });

    res.setHeader('Location', `/apostles/${insertedApostle._id}`);
    res.status(201).json(insertedApostle);
  } catch (error) {
    console.error('Error adding apostle:', error.message, error.stack);
    res.status(400).json({ message: 'Error adding apostle', error: error.message });
  }
   try {
    console.log('POST /api/apostles handler called', JSON.stringify(req.body, null, 2));
    const apostle = new Apostle(req.body);
    await apostle.save();
    res.status(201).json({ status: 'success', data: apostle });
  } catch (error) {
    console.error('POST /api/apostles error:', error);
    res.status(500).json({ status: 'error', message: 'Server error', error: error.message });
  }
};


const updateApostle = async (req, res) => {
  try {
    const db = getDb();
    const apostleId = req.params.id;
    const updateData = req.body;

    if (!updateData || Object.keys(updateData).length === 0) {
      return res.status(400).json({ message: 'Invalid apostle data: update data is required' });
    }

    delete updateData._id;

    const apostleCollection = db.collection('apostles');
    const result = await apostleCollection.findOneAndUpdate(
      { _id: new ObjectId(apostleId) },
      { $set: updateData },
      { returnDocument: 'after' }
    );
    // Debugging log
    if (!result) {
      return res.status(404).json({ message: 'Apostle not found' });
    }

    res.status(204).send();
  } catch (error) {
    console.error('Error updating apostle:', error.message, error.stack);
    if (error.name === 'BSONTypeError') {
      return res.status(400).json({ message: 'Invalid apostle ID format' });
    }
    res.status(500).json({ message: 'Error updating apostle', error: error.message });
  }
};

const deleteApostle = async (req, res) => {
  try {
    const db = getDb();
    const apostleId = req.params.id;

    const apostleCollection = db.collection('apostles');
    const result = await apostleCollection.deleteOne({ _id: new ObjectId(apostleId) });

    if (result.deletedCount === 0) {
      return res.status(404).json({ message: 'Apostle not found' });
    }

    res.status(200).send(); // Fixed: Changed from 200 to 204
  } catch (error) {
    console.error('Error deleting apostle:', error.message, error.stack);
    if (error.name === 'BSONTypeError') {
      return res.status(400).json({ message: 'Invalid apostle ID format' });
    }
    res.status(500).json({ message: 'Error deleting apostle', error: error.message });
  }
};

const getApostleCallings = async (req, res, next) => {
  try {
    const db = getDb();
    const collection = db.collection('callings');
    const result = await collection.find().toArray();
    res.setHeader('Content-Type', 'application/json');
    res.status(200).json(result);
  } catch (error) {
    console.error('Error fetching callings:', error.message, error.stack);
    res.status(500).json({ message: 'Error fetching callings', error: error.message });
  }
};

const getSingleApostleCallings = async (req, res, next) => {
  try {
    const userId = req.params.id;
    const db = getDb();
    const collection = db.collection('callings');
    let result;
    try {
      result = await collection.findOne({ _id: new ObjectId(userId) });
    } catch (err) {
      console.log('getSingleApostleCallings: Invalid ObjectId format for _id:', userId);
      return res.status(400).json({ message: 'Invalid calling ID format' });
    }
    if (!result) {
      console.log('getSingleApostleCallings: No document found for _id:', userId);
      return res.status(404).json({ message: 'Apostle not found' });
    }
    res.setHeader('Content-Type', 'application/json');
    res.status(200).json(result);
  } catch (error) {
    console.error('Error fetching apostle calling:', error.message, error.stack);
    res.status(500).json({ message: 'Error fetching apostle calling', error: error.message });
  }
};

// Create a new apostle calling
//still needs work
const createApostleCallings = async (req, res) => {
  try {
    const db = getDb();
    const apostle = req.body;

    if (!apostle || !apostle.firstName || !apostle.lastName || !apostle.age) {
      return res.status(400).json({ message: 'Invalid apostle data: firstName, lastName, and age are required' });
    }

    const apostleCollection = db.collection('apostles');
    const result = await apostleCollection.insertOne(apostle);
    const insertedApostle = await apostleCollection.findOne({ _id: result.insertedId });

    res.setHeader('Location', `/apostles/${insertedApostle._id}`);
    res.status(201).json(insertedApostle);
  } catch (error) {
    console.error('Error adding apostle:', error.message, error.stack);
    res.status(400).json({ message: 'Error adding apostle', error: error.message });
  }
   try {
    console.log('POST /api/apostles handler called', JSON.stringify(req.body, null, 2));
    const apostle = new Apostle(req.body);
    await apostle.save();
    res.status(201).json({ status: 'success', data: apostle });
  } catch (error) {
    console.error('POST /api/apostles error:', error);
    res.status(500).json({ status: 'error', message: 'Server error', error: error.message });
  }
};
// Update an existing apostle calling
// still needs work
const updateApostleCalling = async (req, res) => {
  try {
    const db = getDb();
    const apostleId = req.params.id;
    const updateData = req.body;

    if (!updateData || Object.keys(updateData).length === 0) {
      return res.status(400).json({ message: 'Invalid apostle data: update data is required' });
    }

    delete updateData._id;

    const apostleCollection = db.collection('apostles');
    const result = await apostleCollection.findOneAndUpdate(
      { _id: new ObjectId(apostleId) },
      { $set: updateData },
      { returnDocument: 'after' }
    );
    // Debugging log
    if (!result) {
      return res.status(404).json({ message: 'Apostle not found' });
    }

    res.status(204).send();
  } catch (error) {
    console.error('Error updating apostle:', error.message, error.stack);
    if (error.name === 'BSONTypeError') {
      return res.status(400).json({ message: 'Invalid apostle ID format' });
    }
    res.status(500).json({ message: 'Error updating apostle', error: error.message });
  }
};

const deleteApostleCalling = async (req, res) => {
  try {
    const db = getDb();
    const apostleId = req.params.id;

    const apostleCollection = db.collection('callings');
    const result = await apostleCollection.deleteOne({ _id: new ObjectId(apostleId) });

    if (result.deletedCount === 0) {
      return res.status(404).json({ message: 'Apostle calling not found' });
    }

    res.status(200).send(); // Fixed: Changed from 200 to 204
  } catch (error) {
    console.error('Error deleting apostle calling:', error.message, error.stack);
    if (error.name === 'BSONTypeError') {
      return res.status(400).json({ message: 'Invalid apostle calling ID format' });
    }
    res.status(500).json({ message: 'Error deleting apostle calling', error: error.message });
  }
};

module.exports = { getAllApostles, getSingleApostle, createApostle, updateApostle, deleteApostle };
module.exports = { getApostleCallings, getSingleApostleCallings, createApostleCallings, updateApostleCalling, deleteApostleCalling };